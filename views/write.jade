extends layout

block content
  script(src='/javascripts/vendor/marked.js')
  script(src='/javascripts/vendor/color-thief.js')
  #post-editor.pure-g-r(data-post-id="#{post ? post._id : ''}")
    .pure-u-1-3
      img(src="/images/andjosh.png", width="100")
    .pure-u-1-3
      .pure-form
        fieldset.pure-group
          input#post-image(type='text', placeholder='//image-url.jpg', value="#{post && post.image ? post.image : req.query.image || ''}").pure-input-1
          input#post-link(type='text', placeholder='//www.example.com/link', value="#{post && post.link ? post.link : req.query.link || ''}").pure-input-1
          input#post-title-editor.pure-input-1(type='text', placeholder='Title', value="#{post ? post.title : req.query.title || ''}", autofocus="autofocus")
        fieldset.pure-group
          textarea#post-textarea.pure-input-1(rows="15") !{post ? post.markdown : req.query.quote || ''}
          span#post-colors
            if post && post.colors
              for color in post.colors 
                span(style="display:inline-block;height:10px;width:30px;background-color:#{color.hex ? color.hex : 'rgb('+[color.red,color.green,color.blue].join(',')+')'};")
            if req.query.colors
              for color in req.query.colors.split(';')
                span(style="display:inline-block;height:10px;width:30px;background-color:#{color};", data-red="#{color.split(',')[0].split('(')[1]}", data-green="#{color.split(',')[1]}", data-blue="#{color.split(',')[2].split(')')[0]}")
        button#save-button(type="submit").pure-button.pure-input-1.pure-button-primary Yep
      br
      br
      div.text-center.lede.boxed
        a(href="javascript:(function(){  function getSelectionHtml() {    var html = '';    if (typeof window.getSelection != 'undefined') {      var sel = window.getSelection();      if (sel.rangeCount) {        var container = document.createElement('div');        for (var i = 0, len = sel.rangeCount; i < len; ++i) {          container.appendChild(sel.getRangeAt(i).cloneContents());        }        html = container.innerHTML;      }    } else if (typeof document.selection != 'undefined') {      if (document.selection.type == 'Text') {        html = document.selection.createRange().htmlText;      }    }    return html;  }  var base = 'http://andjosh.com/javascripts/marklet.js',    s = document.createElement('script'),    key = prompt('Key into the lock...'),    k = document.createElement('span'),    q = document.createElement('span');  s.type = 'text/javascript';  s.src = base;  k.id = 'andjoshBlogKey';  k.className = key;  q.id = 'andjoshQuote';  q.innerHTML = getSelectionHtml();  document.body.appendChild(q);  document.body.appendChild(s);  document.body.appendChild(k);  window.andjoshWindow = window.open('http://example.com', 'andjoshWindow');})();") marklet
    .pure-u-1-3.text-right
      ul.unpub-list
        for p in postList
          li
            a(href="/w?key=#{req.query.key}&edit=#{p._id}") #{p.title}

  script.
    var socket;
    window.onload = function() {
        socket = io.connect(window.location.hostname);
        socket.on('savedPost', function(data) {
          console.log(data.post);
          var done = false;
          if(data.post.published == false){
            for(i=0;i<unPubs.length;i++){
              if(unPubs[i]._id == data.post._id){
                unPubs[i] = data.post;
                done = true;
                updateList(unPubs);
                console.log('extant unpublished');
              }
            }
            if(done == false){
              unPubs.push(data.post);
              updateList(unPubs);
              console.log('new unpublished');
            }
          }else{
            alert('published');
              for(i=0;i<unPubs.length;i++){
                  if(data.post._id == unPubs[i]._id){
                      unPubs.splice(i, 1);
                  }
              }
              updateList(unPubs);
              console.log('published');
          }
        });
        saveButton.onclick = function(){
          saveCurrent();
        };
    };
    function retrieveColors (parentEl) {
      var elements = parentEl.children,
        i = 0,
        length = elements.length,
        arr = [];
      for (; i < length; i++) {
        arr.push({
          red: parseInt(elements[i].dataset.red, 10),
          green: parseInt(elements[i].dataset.green, 10),
          blue: parseInt(elements[i].dataset.blue, 10),
          hex: elements[i].dataset.hex || ''
        });
      }
      return arr;
    }
    var saveCurrent = function(){
      var postEditor = document.getElementById('post-editor'),
          postID = postEditor.dataset.postId,
          title = document.getElementById('post-title-editor').value,
          body = document.getElementById('post-textarea').value,
          imageUrl = document.getElementById('post-image').value,
          linkUrl = document.getElementById('post-link').value,
          colors = retrieveColors(document.getElementById('post-colors'));
      if(body && title){
        var r = confirm("Publish this?");
        if(postID){
          socket.emit('updatePost', {
            markdown: body,
            title: title,
            _id: postID,
            published: r,
            image: imageUrl,
            link: linkUrl,
            colors: colors,
            time: (new Date)
          });
        }else{
          socket.emit('createPost', {
            markdown: body,
            title: title,
            published: r,
            image: imageUrl,
            link: linkUrl,
            colors: colors,
            time: (new Date)
          });
        }
      }else{
        alert('need both title and body!');
      }
    };
    var unPubs = !{JSON.stringify(unpublishedPosts) || '[]'},
      saveButton = document.getElementById('save-button'),
      displayPost = function(elem){
        for(i=0;i<unPubs.length;i++){
          if(unPubs[i]._id == elem.dataset.postId){
            document.getElementById('post-editor').dataset.postId = elem.dataset.postId;
            document.getElementById('post-title-editor').value = unPubs[i].title;
            document.getElementById('post-image').value = unPubs[i].image || '';
            document.getElementById('post-link').value = unPubs[i].link || '';
            document.getElementById('post-colors').innerHTML = null;
            document.getElementById('post-textarea').innerHTML = unPubs[i].markdown;
          }
        }
      },
      listenToMenuPosts = function(){
        var menuPosts = document.getElementsByClassName('menu-post-link');
        for(i=0;i<menuPosts.length;i++){
          menuPosts[i].onclick = function(){
            displayPost(this);
          }
        }
      },
      updateList = function(unPubs){
        var menu = document.getElementById('post-menu-items');
        menu.innerHTML = '';
        for(i=0;i<unPubs.length;i++){
          menu.appendChild(
            create('a',{
              textContent: unPubs[i].title,
              className: 'menu-post-link',
              dataset:{
                postId: unPubs[i]._id
              }
            })
          );
        }
        listenToMenuPosts();
      };
    listenToMenuPosts();
    // dnd interface and loading
    (function initializeDnd(window, document) {
      function handleDragOver(evt) {
        evt.stopPropagation();
        evt.preventDefault();
        evt.dataTransfer.dropEffect = 'copy'; // Explicitly show this is a copy.
        document.body.style.border = '10px solid #5E5BD6';
      }
      function loadColors(image) {
        var colorThief = new ColorThief(),
          otherColors = colorThief.getPalette(image, 5),
          output = document.getElementById('post-colors'),
          i = 0,
          length = otherColors.length;
        output.innerHTML = null;
        for (; i <  length; i++) {
          output.appendChild(create('span', {
            style: {
              width: '30px',
              height:'10px',
              display: 'inline-block',
              background: 'rgb('+[otherColors[i][0].toString(), otherColors[i][1].toString(), otherColors[i][2].toString()].join(',')+')'
            },
            dataset: {
              red: otherColors[i][0],
              green: otherColors[i][1],
              blue: otherColors[i][2]
            }
          }));
        }
      }
      function handleImageDrop(evt) {
        evt.stopPropagation();
        evt.preventDefault();
        document.body.style.border = 'none';
        function makeReaderLoadFxn() {
          return (function(theFile) {
            return function(e) {
              var result = e.target.result,
                editor = document.getElementById('post-editor');
              editor.appendChild(create('img', {
                src: result,
                id: 'dropped-image',
                onload: function() {loadColors(document.getElementById('dropped-image'));}
              }));
            };
          })(f);
        }
        if (window.File && window.FileReader && window.FileList && window.Blob) {
          var files = evt.dataTransfer.files,
              i = 0,
              f, reader;
          for (; i < files.length; i++) {
            f = files[i];
            if (!f.type.match(/image.*/)) {
              alert('You\'re gonna need to upload a valid image file!\nCurrently, you are uploading a file of type "'+f.type.toString()+'"');
              continue;
            }
            reader = new FileReader();
            reader.onload = makeReaderLoadFxn();
            reader.readAsDataURL(f);
          }
        } else {
          alert('Javascript File APIs are not fully supported in this here browser.\n That sucks.');
        }
      }
      var dropZone = document.getElementsByTagName('body')[0];
      dropZone.addEventListener('dragover', handleDragOver, false);
      dropZone.addEventListener('drop', handleImageDrop, false);
    })(this, this.document);
